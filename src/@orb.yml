version: 2.1

description: >
  Reconstruct $CIRCLE_COMPARE_URL environment variable

examples:
  simple-monorepo-flow:
    description: |
      Execute some action only for modified files from this commit. This example presupposes a monorepo of orbs,
      of which we only want to publish those with modifications. See https://discuss.circleci.com/t/does-circleci-2-0-work-with-monorepos
      for details
    usage:
      version: 2.1

      orbs:
        compare-url: iynere/compare-url@volatile

      workflows:
        version: 2
        publish-orbs:
          jobs:
            - publish

      jobs:
        publish:
          docker:
            - image: circleci/circleci-cli
          steps:
            - checkout
            - compare-url/reconstruct
            - run:
                name: Publish modified orbs
                shell: /bin/bash -exo pipefail
                command: |
                  # save value stored in file to a local env var
                  CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt)

                  COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')

                  echo "Commit range: $COMMIT_RANGE"

                  for ORB in folder-containing-orb-subdirs/*/; do

                    orbname=$(basename $ORB)

                    if [[ $(git diff $COMMIT_RANGE --name-status | grep "$orbname") ]]; then

                      echo "publishing ${orbname}"

                      circleci orb publish ${ORB}/orb.yml namespace/${orbname}@version
                    else
                      echo "${orbname} not modified; no need to publish"
                    fi
                  done

commands:
  reconstruct:
    description: >
      Reconstruct CIRCLE_COMPARE_URL and output it to an eponymous file (because each step in a CircleCI job receives a fresh shell environment by default, storing it as an environment variable would not typically persist across steps).

    parameters:
      circle-token:
        description: >
          Your CircleCI API token, defaults to $CIRCLE_TOKEN
        type: string
        default: $CIRCLE_TOKEN
      project-path:
        description: >
          Absolute path to your project's base directory,
          necessary for running git commands
        type: string
        default: ~/project

    steps:
      - run:
          name: Reconstruct CIRCLE_COMPARE_URL
          command: |
            # this starts as false, set to true to exit `until` loop
            FOUND_BASE_COMPARE_COMMIT=false

            # start iteration from the job before $CIRCLE_BUILD_NUM
            JOB_NUM=$(( $CIRCLE_BUILD_NUM - 1 ))

            # abstract this logic out, it gets reused a few times
            extract_commit_from_job () {
              curl --user <<parameters.circle-token>>: \
              https://circleci.com/api/v1.1/project/$1/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$2 | \
              grep '"vcs_revision" : ' | sed -E 's/"vcs_revision" ://' | sed -E 's/[[:punct:]]//g' | sed -E 's/ //g'
            }

            # figure this out up top, so we don't worry about it later
            if [[ $(echo $CIRCLE_REPOSITORY_URL | grep github.com:$CIRCLE_PROJECT_USERNAME) ]]; then
              VCS_TYPE=github
            else
              VCS_TYPE=bitbucket
            fi

            # manually iterate downard through previous jobs
            until [[ $(echo $FOUND_BASE_COMPARE_COMMIT) == true ]]
            do

              # save circle api output to a temp file for reuse
              curl --user <<parameters.circle-token>>: \
                https://circleci.com/api/v1.1/project/$VCS_TYPE/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUM \
                > JOB_OUTPUT

              # general approach:
              # there's a couple of skip conditions to observe here—
              # roughly in order of precedence:

              # 1. is JOB_NUM part of the current workflow?
              # 2. is JOB_NUM a retry of a job from the same commit?
                # 2.5 or part of a rerun workflow from the same commit?
              # 3. is JOB_NUM from a different branch?
                # 3.5 unless this is a new branch—see below

              # edge cases:
              # 1. if $CIRCLE_SHA1 is the first commit on a new branch
                # then we need the most recent ancestor, branch-agnostic

              # skip conditions 1 & 2/2.5:
              if [[ $(grep "\"workflow_id\" : \"$CIRCLE_WORKFLOW_ID\"" JOB_OUTPUT) || \
                ! $(grep '"retry_of" : null' JOB_OUTPUT) || \
                $(grep "\"vcs_revision\" : \"$CIRCLE_SHA1\"" JOB_OUTPUT) ]]; then
                echo "$JOB_NUM was a retry of a previous job, part of a rerun workflow, or else part of the current workflow"
                JOB_NUM=$(( $JOB_NUM - 1 ))
                continue
              fi

              # handling condition 3 & edge case 1:
              # check if this is a brand-new branch
              if [[ $(curl --user <<parameters.circle-token>>: \
                https://circleci.com/api/v1.1/project/$VCS_TYPE/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM | grep '"previous" : null') ]]; then
                echo "$CIRCLE_SHA1 is the first commit on branch $CIRCLE_BRANCH"

                COMMIT_FROM_JOB_NUM=$(extract_commit_from_job $VCS_TYPE $JOB_NUM)

                cd <<parameters.project-path>>

                # check if commit from JOB_NUM is an ancestor of $CIRCLE_SHA1
                git merge-base --is-ancestor $COMMIT_FROM_JOB_NUM $CIRCLE_SHA1; RETURN_CODE=$?

                if [[ $RETURN_CODE == 1 ]]; then
                  echo "commit $COMMIT_FROM_JOB_NUM from $JOB_NUM is not an ancestor of the current commit"
                  JOB_NUM=$(( $JOB_NUM - 1 ))
                  continue
                elif [[ $RETURN_CODE == 0 ]]; then
                  FOUND_BASE_COMPARE_COMMIT=true
                else
                  echo "unknown return code $RETURN_CODE from git merge-base with base commit $COMMIT_FROM_JOB_NUM, from job $JOB_NUM"
                fi
              else
                # if not a new branch, find its most recent previous commit
                if [[ $(grep "\"branch\" : \"$CIRCLE_BRANCH\"" JOB_OUTPUT) ]]; then
                  FOUND_BASE_COMPARE_COMMIT=true
                else
                  echo "$JOB_NUM was not on branch $CIRCLE_BRANCH"
                  JOB_NUM=$(( $JOB_NUM - 1 ))
                  continue
                fi
              fi
            done

            rm -f JOB_OUTPUT

            BASE_COMPARE_COMMIT=$(extract_commit_from_job $VCS_TYPE $JOB_NUM)

            # construct our compare URL, based on VCS type
            if [[ $(echo $VCS_TYPE | grep github) ]]; then
              CIRCLE_COMPARE_URL="https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/compare/${BASE_COMPARE_COMMIT:0:12}...${CIRCLE_SHA1:0:12}"
            else
              CIRCLE_COMPARE_URL="https://bitbucket.org/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/branches/compare/${BASE_COMPARE_COMMIT:0:12}...${CIRCLE_SHA1:0:12}"
            fi

            echo "base compare commit hash is:" $BASE_COMPARE_COMMIT

            echo "- - - - - - - - - - - - - - - - - - - - - - - -"

            echo "this job's commit hash is:" $CIRCLE_SHA1

            echo "- - - - - - - - - - - - - - - - - - - - - - - -"

            echo "recreated CIRCLE_COMPARE_URL:" $CIRCLE_COMPARE_URL

            echo "- - - - - - - - - - - - - - - - - - - - - - - -"

            echo "outputting CIRCLE_COMPARE_URL to a file in your working directory, called CIRCLE_COMPARE_URL.txt"

            echo $CIRCLE_COMPARE_URL > CIRCLE_COMPARE_URL.txt
